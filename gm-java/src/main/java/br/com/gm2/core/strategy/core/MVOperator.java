/**
 * Copyright (C) {2017}  {Glaucio Melo}
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package br.com.gm2.core.strategy.core;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import com.google.common.hash.Hashing;

import br.com.gm2.core.element.Crumb;
import br.com.gm2.core.element.GMFileFormat;

/**
 * Define Measure and Verify static operators.
 * 
 * @author glauciom
 *
 */
public final class MVOperator {

	public static long metrics = 0;

	public static byte[] processSubset(final Crumb crumb, final int[] subset, final int[] identity) {
		int capacity = crumb.n / GMFileFormat.BYTE_SIZE;
		byte[] content = toGMByteArray(subset, capacity);
		if (crumb.uniqueness == hash(content)) {
			if (crumb.inverse) {
				content = toGMByteArrayFlip(content, capacity);
			}
			return content;
		}
		return null;
	}

	public static int hash(final byte[] b) {
		return Hashing.murmur3_32().hashBytes(b).asInt();
	}

	public static byte[] toGMByteArray(final int[] bits, final int capacity) {
		byte[] bytes = new byte[capacity];
		for (int i = 0; i < bits.length; i++) {
			bytes[bits[i] / GMFileFormat.BYTE_SIZE] |= 1 << (bits[i] % GMFileFormat.BYTE_SIZE);
		}
		return bytes;
	}

	public static byte[] toGMByteArrayFlip(final byte[] bytes, final int capacity) {
		for (int i = 0; i < bytes.length; i++) {
			bytes[i] = (byte) ~bytes[i];
		}
		return bytes;
	}

	public static int measure(final int[] subset, final int[] identity, final int i, final int dp) {
		metrics++;
		int result = dp;
		for (int j = i; j < identity.length; j++) {
			int diff = identity[j] - subset[j];
			result += diff * diff;
		}
		return result;
	}

	public static String print(int[] subset, int d) {
		String result = "";
		for (int i = 0; i < subset.length; i++) {
			result += subset[i] + " ";
		}
		return result + " " + d;
	}

	public static List<String> G(String bigInteger) {
		List<BigInteger> result = new ArrayList<>();
		List<String> factors = new ArrayList<>();

		BigInteger item = new BigInteger(bigInteger);
		result.add(item);
		do {
			int precision = BigOperator.precision(item.toString());
			BigDecimal ln = new BigDecimal(BigOperator.log(item.toString(), precision));
			String lnString = lnPrecision(ln.toString(), precision);
			BigDecimal exp = new BigDecimal(BigOperator.exp(lnString.toString(), lnString.length() - 1));
			BigInteger expCeil = BigOperator.ceil(exp);
			item = item.subtract(expCeil);
			result.add(item);
			factors.add(lnString);
		} while (!item.equals(BigInteger.ZERO));

		return factors;
	}
	
	public static String lnPrecision(String input, Integer precision) {
		String result = input;
		for (int i = 0; i < precision - input.length() + 1; i++) {
			result = "0" + result;
		}
		return result;
	}

	public static String GI(List<String> factors) {
		BigDecimal res = BigDecimal.ZERO;
		for (String d : factors) {
			res = res.add(new BigDecimal(BigOperator.exp(d.toString(), d.toString().length() - 1)));
		}

		return BigOperator.ceil(res).toString();
	}

	public static void main(String[] args) {
//		String input = "";
		String input = "1000000000000000000082409842824274027049827409720947209740928702498248092840404909402940940930495590595909095095095095";
		List<String> list = G(input);
		System.out.println("G: " + list);
		String res = GI(list);
		System.out.println("GI: " + new BigDecimal(res).subtract(new BigDecimal(input)));
	}

}
